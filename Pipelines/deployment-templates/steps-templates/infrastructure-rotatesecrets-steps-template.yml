parameters:
  azureSubscription: ""
  rotateSecrets: true
  storeSQLUser: false

steps:
  - task: AzurePowerShell@5
    displayName: 'Start App Services - $(geo) $(environment)'
    inputs:
      azureSubscription: '${{ parameters.azureSubscription }}'
      ScriptPath: '$(Pipeline.Workspace)/Infrastructure/Scripts/Set-AppServiceState.ps1'
      ScriptArguments: '-ResourceGroupName ''$(resourceGroupName)'' -Action ''Start'''
      azurePowerShellVersion: LatestVersion
      
  - task: AzurePowerShell@5
    displayName: 'Store/Rotate Function Host Key - $(geo) $(environment)'
    inputs:
      azureSubscription: '${{ parameters.azureSubscription }}'
      ScriptPath: '$(Pipeline.Workspace)/Infrastructure/Scripts/Add-FunctionHostKeyToKeyVault.ps1'
      ScriptArguments: '-ResourceGroupName ''$(resourceGroupName)'' -FunctionAppList ''$(functionAppNames)'' -FunctionAppNames ''$(functionAppNamesListJson)'' -KeyVaultName ''$(applicationKeyVaultName)'' -RotateKey:$${{ parameters.rotateSecrets }}'
      azurePowerShellVersion: LatestVersion
      errorActionPreference: 'continue'      

  - task: AzurePowerShell@5
    displayName: 'Stop App Services - $(geo) $(environment)'
    inputs:
      azureSubscription: '${{ parameters.azureSubscription }}'
      ScriptPath: '$(Pipeline.Workspace)/Infrastructure/Scripts/Set-AppServiceState.ps1'
      ScriptArguments: '-ResourceGroupName ''$(resourceGroupName)'' -Action ''Stop'''
      azurePowerShellVersion: LatestVersion

  - task: AzurePowerShell@5
    displayName: 'Store AD Client Secret - $(geo) $(environment)'
    inputs:
      azureSubscription: '${{ parameters.azureSubscription }}'
      ScriptPath: '$(Pipeline.Workspace)/Infrastructure/Scripts/Add-SecretToKeyVault.ps1'
      ScriptArguments: '-KeyVaultName ''$(applicationKeyVaultName)'' -SecretName ''AzureADClientSecretKey'' -SecretValue ''$(azureADClientSecretValue)'''
      azurePowerShellVersion: LatestVersion

  - task: AzurePowerShell@5
    displayName: 'Rotate Function Storage Account Keys - $(geo) $(environment)'
    condition: and(succeeded(), ${{ parameters.rotateSecrets }})
    inputs:
      azureSubscription: '${{ parameters.azureSubscription }}'
      ScriptPath: '$(Pipeline.Workspace)/Infrastructure/Scripts/Invoke-RotateStorageAccountKeys.ps1'
      ScriptArguments: '-ResourceGroupName ''$(resourceGroupName)'' -StorageAccountName ''$(fnStorageAccountName)'' -FunctionAppArray ''$(functionAppNamesListJson)'''
      azurePowerShellVersion: LatestVersion
      
  - task: AzurePowerShell@5
    displayName: 'Rotate App SignalR Keys - $(geo) $(environmentFullName)'
    condition: and(succeeded(), ${{ parameters.rotateSecrets }})
    inputs:
      azureSubscription: '${{ parameters.azureSubscription }}'
      ScriptPath: '$(Pipeline.Workspace)/Infrastructure/Scripts/Invoke-RotateSignalRAccessKey.ps1'
      ScriptArguments: '-ResourceGroupName "$(resourceGroupName)" -SignalRName "$(signalRServiceName)"'
      azurePowerShellVersion: LatestVersion

  - task: AzurePowerShell@5
    displayName: 'Rotate DB Admin Password - $(geo) $(environment)'
    condition: and(succeeded(), ${{ parameters.rotateSecrets }})
    inputs:
      azureSubscription: '${{ parameters.azureSubscription }}'
      ScriptPath: '$(Pipeline.Workspace)/Infrastructure/Scripts/Invoke-RotateSqlAdministratorPassword.ps1'
      ScriptArguments: '-ResourceGroupName ''$(resourceGroupName)'' -SqlServerName ''$(sqlServerName)'' -KeyVaultName ''$(deployKeyVaultName)'' -SecretName ''$(dbAdminPasswordSecretName)'''
      azurePowerShellVersion: LatestVersion

  - task: AzurePowerShell@5
    displayName: 'Get DB Admin Password'
    inputs:
      azureSubscription: '${{ parameters.azureSubscription }}'
      ScriptType: FilePath
      ScriptPath: '$(Pipeline.Workspace)/Infrastructure/PipelineScripts/Set-SecretAsPipelineVariable.ps1'
      ScriptArguments: '-KeyVaultName ''$(deployKeyVaultName)'' -SecretName ''$(dbAdminPasswordSecretName)'' -VariableName ''dbAdminPassword'''
      azurePowerShellVersion: LatestVersion
      
  - task: AzurePowerShell@5
    displayName: 'Store Developer Sql User - All DB''s - $(geo) $(environment)'
    condition: and(succeeded(), not(in(variables['Environment'], 'bcp', 'prod', 'stage', 'val', 'int', 'test')), ${{ parameters.storeSQLUser }})
    inputs:
      azureSubscription: '${{ parameters.azureSubscription }}'
      ScriptPath: '$(Pipeline.Workspace)/Infrastructure/Scripts/Set-SqlUserInDatabasesAsJob.ps1'
      ScriptArguments: '-AppDatabaseNames ''$(completeDbNamesListJson)'' -AppDatabaseNameFormat json -SqlServerName ''$(sqlServerName)'' -AdminDbUserName ''$(dbAdminLoginName)'' -AdminDbPassword ''$(dbAdminPassword)'' -AppKeyVaultName ''$(applicationKeyVaultName)'' -PasswordSecretName ''DeveloperAccountPassword'' -SqlUserName ''developer_account'' -SqlUserPassword ''$(developerSqlUserPassword)'' -DatabaseRoles ''$(developerDatabaseRoles)'''
      pwsh: true
      azurePowerShellVersion: LatestVersion

  - task: AzurePowerShell@5
    displayName: 'Start App Services - $(geo) $(environment)'
    inputs:
      azureSubscription: '${{ parameters.azureSubscription }}'
      ScriptPath: '$(Pipeline.Workspace)/Infrastructure/Scripts/Set-AppServiceState.ps1'
      ScriptArguments: '-ResourceGroupName ''$(resourceGroupName)'' -Action ''Start'''
      azurePowerShellVersion: LatestVersion
