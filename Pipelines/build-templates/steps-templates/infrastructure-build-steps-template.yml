parameters:
  azureSubscription: ""
  resourceGroupName: ""
  validateTemplates: false
  createArtifact: true 
  scriptCopyOnly: true
  
steps:
  - checkout: self
    clean: true

  - task: AzureResourceGroupDeployment@2
    displayName: Validate Network Template
    condition: and(succeeded(), ${{ parameters.validateTemplates }})
    inputs:
      ConnectedServiceName: ${{ parameters.azureSubscription }}
      resourceGroupName: ${{ parameters.resourceGroupName }}
      location: $(location)
      csmFile: $(Build.SourcesDirectory)/Templates/network-template.json
      csmParametersFile: $(Build.SourcesDirectory)/Parameters/$(geo)/network-parameters-$(locationCode)-dev.json
      overrideParameters: -environment test
      deploymentMode: Validation
  
  - task: AzureResourceGroupDeployment@2
    displayName: Validate Shared Template
    condition: and(succeeded(), ${{ parameters.validateTemplates }})
    inputs:
      ConnectedServiceName: ${{ parameters.azureSubscription }}
      resourceGroupName: ${{ parameters.resourceGroupName }}
      location: $(location)
      csmFile: $(Build.SourcesDirectory)/Templates/shared-template.json
      csmParametersFile: $(Build.SourcesDirectory)/Parameters/$(geo)/shared-parameters-$(locationCode)-dev.json
      overrideParameters: -environment test -containerBlobNames ["test-blob"] -nonProdIpFirewallRules [{"name":"Test","cidr":"172.16.0.1/32","startIpAddress":"172.16.0.1","endIpAddress":"172.16.0.1"}]
      deploymentMode: Validation

  - task: AzureResourceGroupDeployment@2
    displayName: Validate DB Template
    condition: and(succeeded(), ${{ parameters.validateTemplates }})
    inputs:
      ConnectedServiceName: ${{ parameters.azureSubscription }}
      resourceGroupName: ${{ parameters.resourceGroupName }}
      location: $(location)
      csmFile: $(Build.SourcesDirectory)/Templates/db-template.json
      csmParametersFile: $(Build.SourcesDirectory)/Parameters/$(geo)/db-parameters-$(locationCode)-dev.json
      overrideParameters: -environment test -dbAdminLoginName 'testdbadmin' -dbAdminLoginPwd 'AdUMMyC#mplexpAssword' -dbContainerNames ["TEST_DB"] -nonProdIpFirewallRules [{"name":"Test","cidr":"172.16.0.1/32","startIpAddress":"172.16.0.1","endIpAddress":"172.16.0.1"}]
      deploymentMode: Validation

  - task: AzureResourceGroupDeployment@2
    displayName: Validate DB Replica Template
    condition: and(succeeded(), ${{ parameters.validateTemplates}})
    inputs:
      ConnectedServiceName: ${{ parameters.azureSubscription }}
      resourceGroupName: ${{ parameters.resourceGroupName }}
      location: $(location)
      csmFile: $(Build.SourcesDirectory)/Templates/db-replica-template.json
      csmParametersFile: $(Build.SourcesDirectory)/Parameters/$(geo)/db-parameters-$(locationCode)-dev.json
      overrideParameters: -environment test -dbAdminLoginName 'testdbadmin' -dbAdminLoginPwd 'AdUMMyC#mplexpAssword' -dbContainerNames ["TEST_DB"] -nonProdIpFirewallRules [{"name":"Test","cidr":"172.16.0.1/32","startIpAddress":"172.16.0.1","endIpAddress":"172.16.0.1"}]
      deploymentMode: Validation

  - task: AzureResourceGroupDeployment@2
    displayName: Validate App Template
    condition: and(succeeded(), ${{ parameters.validateTemplates }})
    inputs:
      ConnectedServiceName: ${{ parameters.azureSubscription }}
      resourceGroupName: ${{ parameters.resourceGroupName }}
      location: $(location)
      csmFile: $(Build.SourcesDirectory)/Templates/app-template.json
      csmParametersFile: $(Build.SourcesDirectory)/Parameters/$(geo)/app-parameters-$(locationCode)-dev.json
      overrideParameters: -environment test -functionAppNames ["tnavigatorfnqnause2"] -cekKeyVaultIdentity $(cekKeyVaultIdentity) -cekKeyVaultResourceGroup $(cekKeyVaultResourceGroup)
      deploymentMode: Validation

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    condition: and(succeeded(), not(${{ parameters.scriptCopyOnly }}), ${{ parameters.createArtifact }})
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
        **/*
        !.git/**/*
        !**/*.md
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      CleanTargetFolder: true
      OverWrite: true

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    condition: and(succeeded(), ${{ parameters.scriptCopyOnly }}, ${{ parameters.createArtifact }})
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
        **/Pipelines/common/**
        **/PipelineScripts/**
        **/Scripts/**
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      CleanTargetFolder: true
      OverWrite: true

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Artifact: Infrastructure'
    condition: and(succeeded(), ${{ parameters.createArtifact }})
    inputs:
      artifact: Infrastructure
      targetPath: '$(Build.ArtifactStagingDirectory)'

